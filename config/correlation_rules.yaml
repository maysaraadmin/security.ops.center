# SIEM Correlation Rules Configuration
# This file defines the correlation rules for the SIEM system

# Global settings
settings:
  # Default severity for rules without explicit severity
  default_severity: "medium"
  
  # Default time window for threshold rules (in seconds)
  default_time_window: 300  # 5 minutes
  
  # Maximum number of alerts to keep in memory
  max_alerts: 1000
  
  # Alert retention period (in days)
  alert_retention_days: 30

# Rule definitions
rules:
  # Failed authentication attempts
  - id: "auth_failed_multiple"
    name: "Multiple Failed Authentication Attempts"
    description: "Multiple failed authentication attempts from the same source"
    type: "threshold"
    severity: "high"
    enabled: true
    field: "source_ip"
    threshold: 5
    time_window_seconds: 300  # 5 minutes
    group_by: ["source_ip", "username"]
    tags: ["authentication", "brute_force"]
  
  # Successful authentication after multiple failures
  - id: "auth_success_after_failures"
    name: "Successful Authentication After Failures"
    description: "Successful authentication after multiple failures from the same source"
    type: "sequence"
    severity: "high"
    enabled: true
    sequence:
      - event_type: "authentication_failure"
        min_count: 3
        within_seconds: 600  # 10 minutes
        group_by: ["source_ip", "username"]
      - event_type: "authentication_success"
        same_fields: ["source_ip", "username"]
    tags: ["authentication", "lateral_movement"]
  
  # Port scanning detection
  - id: "port_scan_detected"
    name: "Port Scanning Activity"
    description: "Multiple connection attempts to different ports from the same source"
    type: "threshold"
    severity: "medium"
    enabled: true
    field: "destination_port"
    threshold: 10
    time_window_seconds: 60  # 1 minute
    group_by: ["source_ip"]
    tags: ["reconnaissance", "scanning"]
  
  # Data exfiltration attempt
  - id: "data_exfiltration"
    name: "Potential Data Exfiltration"
    description: "Large outbound data transfer"
    type: "simple"
    severity: "critical"
    enabled: true
    conditions:
      - "outbound_bytes > 1073741824"  # 1GB
    tags: ["data_loss", "exfiltration"]
  
  # Unauthorized access attempt
  - id: "unauthorized_access"
    name: "Unauthorized Access Attempt"
    description: "Access attempt to restricted resource"
    type: "simple"
    severity: "high"
    enabled: true
    conditions:
      - "event_type == 'access_denied'"
      - "resource_type in ['admin_panel', 'sensitive_file', 'database']"
    tags: ["access_control", "unauthorized"]
  
  # Malware detection
  - id: "malware_detected"
    name: "Malware Detection"
    description: "Malware detected on endpoint"
    type: "simple"
    severity: "critical"
    enabled: true
    conditions:
      - "event_type == 'malware_detection'"
      - "severity in ['high', 'critical']"
    tags: ["malware", "endpoint"]
  
  # Account lockout
  - id: "account_lockout"
    name: "Account Lockout"
    description: "User account has been locked due to multiple failed login attempts"
    type: "simple"
    severity: "medium"
    enabled: true
    conditions:
      - "event_type == 'account_locked'"
    tags: ["authentication", "account"]
  
  # New admin user created
  - id: "admin_user_created"
    name: "New Admin User Created"
    description: "A new user with administrative privileges was created"
    type: "simple"
    severity: "high"
    enabled: true
    conditions:
      - "event_type == 'user_created'"
      - "'admin' in groups or 'administrator' in groups"
    tags: ["privilege_escalation", "user_management"]
  
  # Failed login to disabled account
  - id: "disabled_account_login_attempt"
    name: "Login Attempt to Disabled Account"
    description: "Login attempt to a disabled or expired account"
    type: "simple"
    severity: "medium"
    enabled: true
    conditions:
      - "event_type == 'authentication_failure'"
      - "account_status in ['disabled', 'expired']"
    tags: ["authentication", "account"]
  
  # Unusual time login
  - id: "unusual_time_login"
    name: "Login During Unusual Hours"
    description: "Login outside of normal business hours"
    type: "simple"
    severity: "low"
    enabled: true
    conditions:
      - "event_type == 'authentication_success'"
      - "not (time.hour >= 8 and time.hour <= 18 and time.weekday() < 5)"
    tags: ["authentication", "anomaly"]

# Rule groups for better organization
rule_groups:
  authentication:
    name: "Authentication"
    description: "Rules related to user authentication"
    rules:
      - "auth_failed_multiple"
      - "auth_success_after_failures"
      - "account_lockout"
      - "disabled_account_login_attempt"
      - "unusual_time_login"
  
  network:
    name: "Network Activity"
    description: "Rules for network-based detections"
    rules:
      - "port_scan_detected"
      - "data_exfiltration"
  
  access_control:
    name: "Access Control"
    description: "Rules for access control violations"
    rules:
      - "unauthorized_access"
      - "admin_user_created"
  
  malware:
    name: "Malware & Threats"
    description: "Rules for malware and threat detection"
    rules:
      - "malware_detected"

# Suppression rules to reduce noise
suppressions:
  - name: "Ignore test IPs"
    description: "Ignore events from test IP addresses"
    conditions:
      - "source_ip in ['192.0.2.0/24', '198.51.100.0/24', '203.0.113.0/24']"
    
  - name: "Ignore scheduled maintenance"
    description: "Ignore events during scheduled maintenance windows"
    schedule:
      days: ["saturday"]
      time_range: ["02:00", "04:00"]
      timezone: "UTC"

# Notification settings
notifications:
  email:
    enabled: true
    smtp_server: "smtp.example.com"
    smtp_port: 587
    smtp_user: "alerts@example.com"
    smtp_password: "${SMTP_PASSWORD}"  # Use environment variable
    from_address: "siem-alerts@example.com"
    to_addresses:
      - "security-team@example.com"
      - "soc@example.com"
    
  slack:
    enabled: true
    webhook_url: "${SLACK_WEBHOOK_URL}"  # Use environment variable
    channel: "#security-alerts"
    username: "SIEM Bot"
    icon_emoji: ":shield:"
    notify_on_severity: ["high", "critical"]

# Custom fields for enrichment
enrichment:
  ip_reputation:
    enabled: true
    sources:
      - "abuseipdb"
      - "virustotal"
    cache_ttl: 86400  # 24 hours
  
  geoip:
    enabled: true
    database_path: "/opt/geoip/GeoLite2-City.mmdb"
    update_frequency: "weekly"
  
  threat_intel:
    enabled: true
    feeds:
      - name: "Abuse.ch"
        url: "https://feodotracker.abuse.ch/downloads/ipblocklist.txt"
        format: "txt"
        update_interval: 3600  # 1 hour
      - name: "AlienVault OTX"
        api_key: "${OTX_API_KEY}"  # Use environment variable
        update_interval: 86400  # 24 hours

# Response actions
automated_response:
  # Block IPs with too many failed logins
  - name: "Block Brute Force IPs"
    description: "Block IPs with too many failed login attempts"
    rule_id: "auth_failed_multiple"
    actions:
      - type: "firewall_block"
        target: "source_ip"
        duration: 3600  # 1 hour
      - type: "email"
        template: "brute_force_detected"
        recipients: ["soc@example.com"]
  
  # Quarantine infected endpoints
  - name: "Quarantine Malware"
    description: "Quarantine endpoints with malware detection"
    rule_id: "malware_detected"
    actions:
      - type: "quarantine_endpoint"
        target: "hostname"
      - type: "create_ticket"
        title: "Malware Detected"
        description: "Malware detected on endpoint: {{ hostname }}"
        priority: "high"

# Compliance reporting
compliance:
  pci_dss:
    enabled: true
    rules:
      - "auth_failed_multiple"
      - "unauthorized_access"
    report_schedule: "0 0 * * 0"  # Weekly on Sunday at midnight
    
  gdpr:
    enabled: true
    rules:
      - "data_exfiltration"
      - "unauthorized_access"
    data_protection_officer: "dpo@example.com"

# Performance settings
performance:
  # Maximum number of events to process in a single batch
  batch_size: 1000
  
  # Number of worker processes for parallel processing
  worker_processes: 4
  
  # Memory usage limits (in MB)
  max_memory_mb: 4096
  
  # Disk usage limits (in MB)
  max_disk_usage_mb: 102400  # 100GB

# Logging configuration
logging:
  level: "INFO"
  file: "/var/log/siem/correlation_engine.log"
  max_size_mb: 100
  backup_count: 5
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# API settings
api:
  enabled: true
  host: "0.0.0.0"
  port: 5000
  auth_required: true
  rate_limit: "1000 per hour"
  cors_allowed_origins:
    - "https://siem.example.com"
    - "http://localhost:3000"

# External integrations
integrations:
  # SIEM integration with other security tools
  splunk:
    enabled: false
    host: "splunk.example.com"
    port: 8089
    username: "siem_integration"
    password: "${SPLUNK_PASSWORD}"  # Use environment variable
    index: "siem_alerts"
  
  # Integration with ticketing system
  jira:
    enabled: false
    url: "https://your-domain.atlassian.net"
    username: "siem_bot"
    api_token: "${JIRA_API_TOKEN}"  # Use environment variable
    project_key: "SEC"
    issue_type: "Incident"
  
  # Integration with threat intelligence platforms
  alienvault_otx:
    enabled: true
    api_key: "${OTX_API_KEY}"  # Use environment variable
    update_interval: 3600  # 1 hour
  
  # Integration with vulnerability scanners
  nessus:
    enabled: false
    host: "nessus.example.com"
    port: 8834
    username: "siem_user"
    password: "${NESSUS_PASSWORD}"  # Use environment variable

# Custom functions for complex correlation
custom_functions:
  # Example: Detect lateral movement between segments
  detect_lateral_movement:
    description: "Detect lateral movement between network segments"
    source: |
      function detect_lateral_movement(events) {
        // Implementation for detecting lateral movement
        // This is a placeholder for the actual implementation
        return [];
      }
  
  # Example: Detect data exfiltration patterns
  detect_data_exfiltration:
    description: "Detect potential data exfiltration attempts"
    source: |
      function detect_data_exfiltration(events) {
        // Implementation for detecting data exfiltration
        // This is a placeholder for the actual implementation
        return [];
      }
