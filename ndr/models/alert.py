"""
Network Alert Model

Defines the structure for network security alerts generated by the analyzer.
"""
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, Any, Optional, List

class AlertSeverity(Enum):
    """Severity levels for network alerts."""
    INFO = 0
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4

@dataclass
class NetworkAlert:
    """
    Represents a security alert generated from network traffic analysis.
    
    Attributes:
        title: Short description of the alert
        description: Detailed description of the alert
        severity: Severity level from AlertSeverity enum
        timestamp: When the alert was generated (defaults to now)
        source_ip: Source IP address associated with the alert
        destination_ip: Destination IP address (if applicable)
        source_port: Source port (if applicable)
        destination_port: Destination port (if applicable)
        protocol: Network protocol (e.g., 'tcp', 'udp')
        metadata: Additional context about the alert
        rule_id: ID of the rule that triggered the alert (if any)
        confidence: Confidence level (0.0-1.0) in the alert
        tags: List of tags for categorization
    """
    title: str
    description: str
    severity: AlertSeverity
    timestamp: datetime = field(default_factory=datetime.utcnow)
    source_ip: Optional[str] = None
    destination_ip: Optional[str] = None
    source_port: Optional[int] = None
    destination_port: Optional[int] = None
    protocol: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    rule_id: Optional[str] = None
    confidence: float = 1.0
    tags: List[str] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert the alert to a dictionary for serialization."""
        return {
            'title': self.title,
            'description': self.description,
            'severity': self.severity.name,
            'timestamp': self.timestamp.isoformat(),
            'source_ip': self.source_ip,
            'destination_ip': self.destination_ip,
            'source_port': self.source_port,
            'destination_port': self.destination_port,
            'protocol': self.protocol,
            'metadata': self.metadata,
            'rule_id': self.rule_id,
            'confidence': self.confidence,
            'tags': self.tags
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'NetworkAlert':
        """Create an alert from a dictionary."""
        return cls(
            title=data['title'],
            description=data['description'],
            severity=AlertSeverity[data['severity']],
            timestamp=datetime.fromisoformat(data['timestamp']) if isinstance(data['timestamp'], str) else data['timestamp'],
            source_ip=data.get('source_ip'),
            destination_ip=data.get('destination_ip'),
            source_port=data.get('source_port'),
            destination_port=data.get('destination_port'),
            protocol=data.get('protocol'),
            metadata=data.get('metadata', {}),
            rule_id=data.get('rule_id'),
            confidence=data.get('confidence', 1.0),
            tags=data.get('tags', [])
        )
    
    def __str__(self) -> str:
        """String representation of the alert."""
        return (f"[{self.severity.name}] {self.title} (Confidence: {self.confidence:.1%})\n"
                f"Source: {self.source_ip or 'N/A'}:{self.source_port or 'N/A'}\n"
                f"Destination: {self.destination_ip or 'N/A'}:{self.destination_port or 'N/A'} {self.protocol or ''}\n"
                f"Time: {self.timestamp.isoformat()}\n"
                f"{self.description}")
